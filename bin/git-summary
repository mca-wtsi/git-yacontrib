#! /bin/sh

verbose=

_state_colour() {
    range_min=$1
    range_max=$2
    range_in=$3
    range_out=$4
    key=$5
    val="$( cat; echo extra line fixes linecount after trailing newline removed )"
    nval="$( printf "%s" "$val" | wc -l )"
    if [ "$nval" -lt "$range_min" ] || [ "$nval" -gt "$range_max" ]; then
	[ -n "$verbose" ] && printf '\n'
	printf " \033[%sm %s \033[m" "$range_out" "$key:$nval"
	[ -n "$verbose" ] && printf '\n'
	[ -n "$verbose" ] && printf "%s\n" "$val" | head -n-1 | sed -e 's/^/  /'
    else
	printf " \033[%sm %s \033[m" "$range_in" "$key:$nval"
    fi
}

_config_unusual() {
    git config -l --local | perl -lne 'BEGIN {
   my @norm = qw{ core.repositoryformatversion=0 core.filemode=true core.bare=false core.logallrefupdates=true };
   push @norm, qw{ remote.origin.fetch=+refs/heads/*:refs/remotes/origin/* };
   @normal{@norm} = ();
   @ignore{qw{ remote.origin.url }} = ();
 }
 next if               exists $normal{$_};
 next if m{^(.*?)=} && exists $ignore{$1};
 next if m{^branch\.(\S+)\.remote=origin$};
 next if m{^branch\.(\S+)\.merge=refs/heads/\1$};
 print'

}

_status() {
    git status --porcelain=1 --untracked=all --ignored=matching
}

_print_match() {
    perl -ne "print if s{$1}{}"
}

# numeric part of ANSI \x1B[...m code
good='32;7'
bad=41
hmmm='33;7'

printf "%-40s:" "$( pwd )"

# things to consider about a repo
git stash list     | _state_colour 0 0 $good $bad  stashes
git remote show -n | _state_colour 1 5 $good $bad  remote
_status | _print_match '^[?][?] ' | _state_colour 0 0 $good $bad  cruft
_status | _print_match '^!! '     | _state_colour 0 0 $good $hmmm ignored
_config_unusual    | _state_colour 0 0 $good $hmmm unusual_config
#  _state_colour 0 0 $good $bad  ?unpushed?

printf "\n"

# other things to consider,
#   tags being pushed; per remote
#   branches being pushed; per remote
#   branches
