#! /bin/bash
# Bash for pipefail

SUBDIRECTORY_OK=1
NONGIT_OK=1
OPTIONS_SPEC="\
git ll-cpanm [ -L <local-lib-dir> ] <cpan-name> ...

This installs CPAN (Perl5) libraries into a local::lib directory,
using cpanm or cpan.  It does not currently do anything to help you
set up ~/.cpan or ~/.cpanm .

First it runs \"git ll-init [ -L <dir> ] --find --perl5\" to safely
obtain an initialised directory.  This also allows several mechanisms
to provide a default for the local-lib-dir.

Then it installs modules.  Might construct a useful commit message
later.

Then it adds and commits everything.  Install errors should cause a
clean reset, leaving a tag on any partial install files.
--
help     Show help
L,lldir= Directory to operate upon.  Takes default from git-ll-init(1).
v,verbose! More noise"

. "$(git --exec-path)/git-sh-setup"

ll_main() {
    local sw lldir
    unset CDPATH

    prog="$( basename $0 | sed -e 's/^git-/git /' )"

    # Read opts - normalised by "git rev-parse --parseopt"
    verb_v=
    verb_q=-q
    verb_printf=true
    while [ $# -gt 0 ]; do
	sw="$1"
	shift
	case "$sw" in
	    -L)	lldir="$1"
		shift ;;
	    -v) verb_v=-v
		verb_q=
		verb_printf=printf
		;;
	    --) break ;;
	esac
    done
    [ $# -eq 0 ] && die "$prog: nothing to do"

    # Choose the lldir.  It may not exist yet.
    lldir="$( git ll-init ${lldir:+-L "$lldir"} $verb_v --find --perl5 )" \
	|| die "$prog: aborting, no local-lib-dir"

    set -x
    cd "$lldir" || die "$prog: failed cd $lldir"
    . ./perl5.sh || die "$prog: failed to source perl5.sh"
    set +x

    while [ $# -gt 0 ]; do
	sw=$1
	shift
	
	ll_install "$sw" || die "$prog: gave up after $sw failed"
    done
}

ll_script_does_use() {
    local instwith instperl fatal instwith_perl msg

    instwith="$1"
    instperl="$2"
    fatal=$3

    instwith_perl="$( head -n1 $instwith | sed -e 's/^[#! ]*//; s/ .*//' )"
    if [ "$instperl" != "$instwith_perl" ]; then
        msg="$prog: Found $instwith but it uses $instwith_perl, and
  PATH suggests you want to use $instperl"
        if [ -n "$fatal" ]; then
            die "${msg}
Cannot continue."
        else
            echo "[w] $msg - trying another" >&2
            false
        fi
    else
        true
    fi
}

ll_install() {
    local instwhat instperl instperl_vsn instwith instret logfn logstash
    instwhat="$1"

    # We want one commit for our work, so push any other dirty files
    # into history.
    git diff --cached --quiet --exit-code || \
	git commit -m '(files staged before install op)'
    git add -A . 
    git diff --cached --quiet --exit-code || \
	git commit -m '(files unstaged before install op)'

    instperl="$( which perl )" || \
        die "$prog: no perl?!  Cannot proceed"
    instperl_vsn="$( $instperl -MConfig -e 'print $Config{version}' )"
    instwith="$( which cpanm || which cpan )" || \
	die "$prog: no cpanm or cpan, cannot proceed"

    # Check that chosen installer is for expected Perl.
    # Getting it wrong is very confusing.
    if ! ll_script_does_use "$instwith" "$instperl"; then
        instwith="$( which cpan )"
        ll_script_does_use "$instwith" "$instperl" fatal
        # Running "perl $instwith $instwhat" is likely to break
        # due to lack of modules
    fi

    # Keeping transcript of build means
    #   - stdout/stderr are merged
    #   - cpan(1) will take defaults because it cannot ask questions
    #   - noise is too big for commit log ("/usr/bin/git: Argument list too long"),
    #     stash it in a committed file
    mkdir -p buildlogs
    logfn="$( mktemp -t git-ll-cpanm.XXXXXX )"
    # MacOS: mktemp -t works
    # GNU: mktemp -t gives us a weird filename, but still works

    [ -z "$PERL_CPANM_OPT" ] && export PERL_CPANM_OPT="--verbose"

    echo "[i] $instwith $instwhat" >&2
    set -o pipefail
    "$instwith" "$instwhat" 2>&1 </dev/null | tee "$logfn"
    instret=$?
    echo "[d] $0: $instwith $instwhat: returned $instret" >&2
    echo "[d] $0: $instwith $instwhat: returned $instret" >> "$logfn"
    logstash="buildlogs/$( echo "$instwhat" | tr -s ' ./:' _ ).$( date +%Ft%T ).log"

    git add -A .
    if git diff --cached --quiet --exit-code; then
	:
	# Nothing changed.  Install was no-op or clean fail.
	echo "[d] $0: nothing to commit" >&2
        mv "$logfn" "$logstash"~no-op~
        # logfile should be ignored by (new 2014-12) default .gitignore
    else
        mv "$logfn" "$logstash"
        git add "$logstash"
	git commit -m "(+) $instwith $instwhat

Perl is $instperl_vsn from $instperl

Log in $logstash"

	if [ $instret != 0 ]; then
	    # Install failed, files changed.  We clean up.
	    git tag -f \
		-m "preserved for debugging: install exit code $instret" \
		"$( echo "fail/$instwhat" | tr -s ' ./:' _ )"
	    # Tagname exclusions are probably adequate but not comprehensive
            # XXX: assume any existing tag was not pushed.  This is for debug.
	    git reset --hard HEAD^
	fi
    fi

    return $instret
}

ll_main "$@"
