#! /usr/bin/perl
use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;

=head1 NAME

git which-me - list the email addresses you used in this repository

=head1 DESCRIPTION

Examines C<git log --all> for B<a>uthor or B<c>ommit addresses which
match a C<name> (default, yours) and tell how they were used in the
history.

This supposes that you commit under one real name but from multiple
email addresses, and need a tool to ensure that new commits match the
earlier history.

=head1 OPTIONS

=over 4

=item -h

Show help

=item --help

Show manpage

=item --name | -n <name>

Set the name to show.  Default is your name.

=item --quiet | -q <n>

Set limit on number of email addresses expected.  When within this
limit, print nothing and return zero.  Otherwise print the report and
return exit code 4.

=item --install "<args>*"

Install a script containing C<< git which-me <args>* >> into the
pre-commit and pre-push hooks for the current repository, if that can
be done without touching existing hooks; or error.

Note that in pre-commit, the new commit is not yet visible, so you
would find the subsequent commit blocked.

Post-commit is not used because it's too late to make an error, and
some GUI tools (rowanj GitX-dev 0.15.1964) don't display the
post-commit text.

TODO: This option is "temporary" in the sense that it's the Wrong Place to put hook management tools.

=cut

sub main {
  my ($findname, $help, $man, $quietlim, $install);
  GetOptions('name|n=s' => \$findname,
             'help' => \$man,
             'install|I=s' => \$install,
             'quiet|q=i', \$quietlim, # TODO: take default from a git-config var, to set once and update manually
             'h' => \$help)
    or pod2usage(-verbose => 0);
  pod2usage(-verbose => 1) if $help;
  pod2usage(-verbose => 2) if $man;

  my $cdup = qx{ git rev-parse --show-cdup };
  return 1 if $?;
  chomp $cdup;
  if ($cdup ne '') {
    chdir $cdup
      or die "chdir $cdup: $!";
  }

  return do_install($install) if defined $install;

  if (!defined $findname) {
    my $ident = qx{ git var GIT_AUTHOR_IDENT };
    return 2 if $?;
    chomp $ident;
    ($findname) = $ident =~ m{^(.*?) +<}
      or die "Can't get your name from ident='$ident'";
  }

  # My identities seen so far
  my @cmd = qw( git log --format=%at:%ae:a:%H:%an%n%ct:%ce:c:%H:%cn --all );
  open my $in, '-|', @cmd
    or die "fork(@cmd) failed: $!";

  my ($ut0, $ut1);
  my %addr; # email => { earlytime, earlyhash, earlytype, latetime, latehash, latetype, count }
  while (my $ln = <$in>) {
    chomp $ln;
    my ($utime, $email, $type, $hash, $name) = split /:/, $ln;
    next unless $name eq $findname;

    # Update %addr
    if (!defined $addr{$email}) {
      $addr{$email} =
        { earlytime => $utime, latetime => $utime,
          earlyhash => $hash,  latehash => $hash,
          earlytype => $type,  latetype => $type,
          type => $type,
          count => 1 };
    } else {
      my $E = $addr{$email};
      if ($utime >= $E->{latetime}) {
        if ($hash eq $E->{latehash}) {
          $E->{latetype} .= $type;
        } else {
          @{$E}{qw{ latehash latetime latetype }} = ($hash, $utime, $type);
        }
      }
      if ($utime <= $E->{earlytime}) {
        if ($hash eq $E->{earlyhash}) {
          $E->{earlytype} .= $type;
        } else {
          @{$E}{qw{ earlyhash earlytime earlytype }} = ($hash, $utime, $type);
        }
      }
      $E->{count} ++;
      $E->{type} .= $type unless $E->{type} =~ /$type/;
      $E->{type} = 'ac' if $E->{type} eq 'ca';
    }

    $ut0 = $utime if !defined $ut0 || $utime < $ut0;
    $ut1 = $utime if !defined $ut1 || $utime > $ut1;
  }

  return 0 if defined $quietlim && $quietlim >= keys %addr;

  my $W = 132;
  my @WT = ($W, $ut0, $ut1);
  print "\n$findname:\n\n";
  my @email_by_freq = sort {( $addr{$b}{count} <=> $addr{$a}{count} ||
                              $addr{$a}{earlytime} <=> $addr{$b}{earlytime} )}
    keys %addr;
  foreach my $email (@email_by_freq) {
    my $E = $addr{$email};
    my ($et, $lt) = map { iso8601($_) }       ($E->{earlytime}, $E->{latetime});
    my ($L, $R)   = map { widthpos(@WT, $_) } ($E->{earlytime}, $E->{latetime});
    my ($eh, $lh) = map { substr($_, 0, 7) }  ($E->{earlyhash}, $E->{latehash});
    my $type = join $E->{type}, qw{ ( ) };

    print edges($L, $R, ',', '.');
    # TODO: ASCII sparkline instead?  All commits marked, edges emphasised

    if ($E->{earlyhash} eq $E->{latehash}) {
      printf("%5dx %19s %7s   %s/%s %4s : %s\n",
             $E->{count}, '', '',  $lt, $lh, $type, $email);
    } else {
      printf("%5dx %19s/%7s - %s/%s %4s : %s\n",
             $E->{count}, $et, $eh, $lt, $lh, $type, $email);
    }
    print edges($L, $R, qw( ` ' ));
  }

  return 4 if defined $quietlim;
  return 0;
}

sub widthpos {
  my ($W, $tl, $tr, $t) = @_;
  return int(0.5 + $W * ($t - $tl) / ($tr - $tl));
}

sub edges {
  my ($l, $r, $ml, $mr) = @_;
  return join '', ' ' x ($l - 1), $ml, '-' x ($r - $l), $mr, "\n";
}

sub iso8601 {
  my ($ut) = @_;
  my @t = localtime($ut);
  return sprintf('%04d-%02d-%02d %02d:%02d:%02d',
                 $t[5] + 1900, $t[4] + 1, @t[3,2,1,0]);
}


sub do_install {
  my ($args) = @_;
  my $sh_txt = qq{#! /bin/sh\n# Installed by git which-me --install\n$0 $args\n};
  my $hookdir = ".git/hooks";
  my @hookfile = map {"$hookdir/$_"} qw( pre-commit pre-push );

  # Check old contents
  die "Hook directory $hookdir: not a directory" unless -d $hookdir;
  my @unknown_old;
  foreach my $oldfn (@hookfile) {
    next unless -f $oldfn && -x _;
    open my $fh, '<', $oldfn or die "Open old $oldfn to read: $!";
    my $old_txt = do { local $/; <$fh> };
    my $old_sh = $old_txt;
    $old_sh =~ s{^#!\s*/bin/sh\n}{};
    $old_sh =~ s{^\s*(#.*)?\n}{}mg;
    chomp $old_sh;
    if ($old_txt eq $sh_txt) {
      warn "Unchanged $oldfn\n";
    } elsif ($old_sh =~ m{^(\Q$0\E|git which-me).*$}) {
      warn "Updating old $oldfn: was $old_sh\n";
    } else {
      warn qq{Old $oldfn = """$old_sh"""};
      push @unknown_old, $oldfn;
    }
  }
  die "Old hook file(s) installed already: @unknown_old" if @unknown_old;

  # Write new contents
  foreach my $hookfile (@hookfile) {
    if (-e $hookfile) {
      rename $hookfile, "$hookfile.old"
        or die "Failed to move $hookfile -> $hookfile.old: $!";
    }
    open my $fh, '>', $hookfile or die "Create $hookfile: $!";
    print {$fh} $sh_txt or die "Write $hookfile: $!";
    close $fh or die "Closing $hookfile: $!";
    chmod 0755, $hookfile or die "chmod 0755 $hookfile: $!";
  }

  return 0;
}


exit main();
