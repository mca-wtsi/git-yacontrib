#! /usr/bin/perl
use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;

=head1 NAME

git which-me - list the email addresses you used in this repository

=head1 DESCRIPTION

Examines C<git log --all> for B<a>uthor or B<c>ommit addresses which
match a C<name> (default, yours) and tell how they were used in the
history.

This supposes that you commit under one real name but from multiple
email addresses, and need a tool to ensure that new commits match the
earlier history.

=head1 OPTIONS

=over 4

=item -h

Show help

=item --help

Show manpage

=item -n | --name <name>

Set the name to show.  Default is your name.

=cut

sub main {
  my ($findname, $help, $man);
  GetOptions('name|n=s' => \$findname,
             'help' => \$man,
             'h' => \$help)
    or pod2usage(-verbose => 0);
  pod2usage(-verbose => 1) if $help;
  pod2usage(-verbose => 2) if $man;

  my $cdup = qx{ git rev-parse --show-cdup };
  return 1 if $?;
  chomp $cdup;
  if ($cdup ne '') {
    chdir $cdup
      or die "chdir $cdup: $!";
  }

  if (!defined $findname) {
    my $ident = qx{ git var GIT_AUTHOR_IDENT };
    return 2 if $?;
    chomp $ident;
    ($findname) = $ident =~ m{^(.*?) +<}
      or die "Can't get your name from ident='$ident'";
  }

  # My identities seen so far
  my @cmd = qw( git log --format=%at:%ae:a:%H:%an%n%ct:%ce:c:%H:%cn --all );
  open my $in, '-|', @cmd
    or die "fork(@cmd) failed: $!";

  my %addr; # email => { earlytime, earlyhash, earlytype, latetime, latehash, latetype, count }
  while (my $ln = <$in>) {
    chomp $ln;
    my ($utime, $email, $type, $hash, $name) = split /:/, $ln;
    next unless $name eq $findname;

    # Update %addr
    if (!defined $addr{$email}) {
      $addr{$email} =
        { earlytime => $utime, latetime => $utime,
          earlyhash => $hash,  latehash => $hash,
          earlytype => $type,  latetype => $type,
          type => $type,
          count => 1 };
    } else {
      my $E = $addr{$email};
      if ($utime >= $E->{latetime}) {
        if ($hash eq $E->{latehash}) {
          $E->{latetype} .= $type;
        } else {
          @{$E}{qw{ latehash latetime latetype }} = ($hash, $utime, $type);
        }
      }
      if ($utime <= $E->{earlytime}) {
        if ($hash eq $E->{earlyhash}) {
          $E->{earlytype} .= $type;
        } else {
          @{$E}{qw{ earlyhash earlytime earlytype }} = ($hash, $utime, $type);
        }
      }
      $E->{count} ++;
      $E->{type} .= $type unless $E->{type} =~ /$type/;
      $E->{type} = 'ac' if $E->{type} eq 'ca';
    }
  }

  print "$findname:\n";
  my @email_by_freq = sort {( $addr{$b}{count} <=> $addr{$a}{count} ||
                              $addr{$a}{earlytime} <=> $addr{$b}{earlytime} )}
    keys %addr;
  foreach my $email (@email_by_freq) {
    my $E = $addr{$email};
    my ($et, $lt) = map { iso8601($_) }      ($E->{earlytime}, $E->{latetime});
    my ($eh, $lh) = map { substr($_, 0, 7) } ($E->{earlyhash}, $E->{latehash});
    my $type = join $E->{type}, qw{ ( ) };
    if ($E->{earlyhash} eq $E->{latehash}) {
      printf("%5dx %19s %7s   %s/%s %4s : %s\n",
             $E->{count}, '', '',  $lt, $lh, $type, $email);
    } else {
      printf("%5dx %19s/%7s - %s/%s %4s : %s\n",
             $E->{count}, $et, $eh, $lt, $lh, $type, $email);
    }
  }

  return 0;
}

sub iso8601 {
  my ($ut) = @_;
  my @t = localtime($ut);
  return sprintf('%04d-%02d-%02d %02d:%02d:%02d',
                 $t[5] + 1900, $t[4] + 1, @t[3,2,1,0]);
}


exit main();
